#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE Node

#include <boost/test/unit_test.hpp>

#include <core/Vec.hpp>

using namespace rmpl;

BOOST_AUTO_TEST_SUITE(constructor)

BOOST_AUTO_TEST_CASE_TEMPLATE(standardConstructor) {
    Node node();
    BOOST_CHECK(node.getDim() == 0);
    BOOST_CHECK(node.empty() == true);
    
}

BOOST_AUTO_TEST_CASE_TEMPLATE(elementContructor) {
    std::vector<Node> nodes;
    nodes.push_back();
    nodes.push_back();
    
}

BOOST_AUTO_TEST_CASE_TEMPLATE(arrayConstructor, T, testTypes) {
    T array[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    Vec<T> obj(10, array);
    BOOST_CHECK(obj.getDim() == 10);
    BOOST_CHECK_EQUAL(obj.empty(), false);
    for (unsigned int i = 0; i < 10; ++i)
        BOOST_CHECK_EQUAL(obj[i], i);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(setAllTo, T, testTypes) {
    T array[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    Vec<T> obj(10, array);
    obj.setAllTo(0);
    for (unsigned int i = 0; i < 10; ++i)
        BOOST_CHECK_EQUAL(obj[i], 0);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(append, T, testTypes) {
    T array1[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    T array2[6] = {10, 11, 12, 13, 14, 15};
    Vec<T> obj1(10, array1);
    Vec<T> obj2(6, array2);
    obj1.append(obj2);
    for (unsigned int i = 0; i < obj1.getDim(); ++i)
        BOOST_CHECK_EQUAL(obj1[i], i);
    obj1.append(Vec<T>());    // append empty Vec
    for (unsigned int i = 0; i < obj1.getDim(); ++i)
        BOOST_CHECK_EQUAL(obj1[i], i);
}

BOOST_AUTO_TEST_SUITE_END()
